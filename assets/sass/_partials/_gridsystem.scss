*,
*::before,
*::after {
  box-sizing: border-box;
}

/* DEV GRID */

  #dev-grid.container{
    position: fixed;
    top: 0px;
    height: 100vh;
    width: 100%;
    pointer-events: none;
    z-index: 99;
    
    .dev-toggle{
    background: $dev-grid-color-two;
    height: 20px;
    width: 20px;
    position: fixed;
    right: 0px;
    bottom:0px;
    pointer-events: initial;
    cursor: pointer;
    }

    .dev-grid-item{
    opacity: 0;
    height: 100vh;
    border: 1px solid $dev-grid-color-one;

       &:after{
          content: "";
          width: inherit;
          display: block;
          border: 1px solid $dev-grid-color-two;
          //margin: 2.5px;
          height: 100%;
       }
    }

 

  } //#dev-grid.container

  body.dev-on{

      #dev-grid.container{

        .dev-grid-item{
          opacity: 1;
        }
      }
  } /* dev-grid on*/


/* END DEV GRID */

/* SITE GRID */

// grid container
.grid {
  display: flex;
  flex-flow: row wrap;
  margin-bottom: 0;
  position: relative;/* I added this to fix the news sticky title - but might affect the whole site? REview accordingly */
}


/* item sizes */


// loop over the breakpoints - for grid item sizing
@each $key, $value in $breakpoints {
  
  @for $i from 1 through $items {
    .grid-item-#{$key}-#{$i} {
     // flex: 0 0 100%;
      @include break($key) {
        flex: 0 0 #{$i / $items * 100%};
      }
    }
  

    .push-item-left-#{$key}-#{$i}, {
       @include break($key) {
      margin-left: #{$i / $items * 100%};
      }
    }
    .push-item-right-#{$key}-#{$i}, {
       @include break($key) {
      margin-right: #{$i / $items * 100%};
      }
    }

    .padding-item-left-#{$key}-#{$i}, {
       @include break($key) {
      padding-left: #{$i / $items * 100%};
      }
    }
     .padding-item-right-#{$key}-#{$i}, {
       @include break($key) {
      padding-right: #{$i / $items * 100%};
      }
    }



  }

  @for $i from 1 through $devitems {
      .outer-grid-item-#{$key}-#{$i} {
        flex: 0 0 100%;
        @include break($key) {
          flex: 0 0 #{$i / $devitems * 100%};
        }
      }

      .size-item-#{$key}-#{$i} {
       // flex: 0 0 100%;
        @include break($key) {
          width: #{$i / $devitems * 100%};
        }
      }

  } //@for $i from 1 through $devitems {



  @for $i from 1 through $devitems {
      .dev-grid-item-#{$key}-#{$i} {
        flex: 0 0 100%;
        @include break($key) {
          flex: 0 0 #{$i / $devitems * 100%};
        }
      }
  }

} //@each $key, $value in $breakpoints 



/* z-index generator for blocks*/

 @for $i from 1 through $z-index-items {
    .block-z-index-#{$i} {
    //  flex: 0 0 #{$i / $devitems * 100%};
    z-index:#{$i};
    }
  }
  
/* end z-index generator for blocks*/

/* gutter */

@media (min-width: map-get($breakpoints,xs)) {
    .grid-item,
    .inp-bg,
    .navigation-toggle,
    .toggle-icon{
      padding:map-get($gutter,xs);
    }
} // xs
/*
@media (min-width: map-get($breakpoints,sm)) {
    .grid-item{
      padding:map-get($gutter,sm);
    }
} // sm
*/
@media (min-width: map-get($breakpoints,md)) {
    .grid-item,
    .inp-bg,
    .navigation-toggle,
    .toggle-icon{
      padding:map-get($gutter,md);
    }
} // md

@media (min-width: map-get($breakpoints,lg)) {
    .grid-item,
    .inp-bg,
    .navigation-toggle,
    .toggle-icon{
      padding:map-get($gutter,lg);
    }
} // lg

@media (min-width: map-get($breakpoints,xl)) {
    .grid-item,
    .inp-bg,
    .navigation-toggle,
    .toggle-icon{
      padding:map-get($gutter,xl);
    }
} // xl




.outer-grid-item.inner{
  margin:auto;

  .grid{
  width: 100%;
  }

}

// if we want to retain the width of the item for bg image purposes
.outer-grid-item.inner-padded{
//  margin:auto;

  .grid{
  width: 100%;
  }

 

}

// this exist so we can use full bg images on .outer-grid-item.inner (i.e use padding instead of margin)
// consider generating this for all breakpoints + desired paddinv values
.outer-grid-item.inner-padded.outer-grid-item-sm-6{
//  margin:auto;
flex: 0 0 100%;

    .grid{
    padding:0 12.5% 0 12.5%;
    flex: 0 0 100%;
    }

}
 

 

/*  fixes? */

.grid-item{
  overflow: hidden; /* issues with items exceeding their size based on child elements */
}

article.container{
min-height: 100vh; // ensure content is atleast high enough to hide footer
position: relative;// ensure absolute positioned items remain inside
}

.center-item{
  margin: auto;// quick fix for aligning 
}


section{
  width: 100%;
  position: relative;
}



/* scaling */


 .scale-me{
      @include scalelink;
      }


  .scale-me.scale-{ // some issues here maybe? was .scale-me.scale-$
      @include scalelink;

}

/* IMAGES */


img{
 opacity: 0; 
} 



/* no selection on images */
img {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

// images loaded
body{ // images loaded:

  #ajax-wrapper{
  opacity: 0;
  }

}

body.loaded{ // images loaded:

  #ajax-wrapper{

  @include opacity-in;
     img{
     opacity: 1;
    }
 
  }

}//body.loaded
//end images loaded

/* end IMAGES */



