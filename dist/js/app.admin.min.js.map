{"version":3,"sources":["app.admin.min.js"],"names":["domReady","fn","document","readyState","addEventListener","orientation","console","log","winwidth","$","window","width","height","addClass","removeClass","opacity","imagesLoaded","setTimeout","adminapp","init"],"mappings":";;;;;;;;;AAAA,SAASA,SAASC,GAA6B,YAAtBC,SAASC,WAAqCD,SAASE,iBAAiB,mBAAmBH,GAA1DA,IAA+D,SAASI,cAAcC,QAAQC,IAAI,8BAA8B,IAAIC,EAASC,EAAEC,QAAQC,QAAsBF,EAAEC,QAAQE,SAAYJ,GAAoBC,EAAE,QAAQI,SAAS,cAAcJ,EAAE,QAAQK,YAAY,cAAkBL,EAAE,QAAQK,YAAY,cAAcL,EAAE,QAAQI,SAAS,aAAc,SAASE,UAAUN,EAAE,QAAQO,aAAa,WAAgEC,WAArD,WAAuBR,EAAE,QAAQI,SAAS,WAAkC,OAEhiB,IAAIK,SAAS,CAACC,KAAK,WAAgBb,QAAQC,IAAI,cAAcQ,UAAUV,gBAAiBL,SAASkB,SAASC","file":"app.admin.min.js","sourcesContent":["function domReady(fn){if(document.readyState!=='loading'){fn();return;}document.addEventListener('DOMContentLoaded',fn);}function orientation(){console.log(\"hello orientation function\");var winwidth=$(window).width();var winheight=$(window).height();if(winwidth>winheight){$(\"body\").addClass('horizontal');$(\"body\").removeClass('vertical');}else{$(\"body\").removeClass('horizontal');$(\"body\").addClass('vertical');}}function opacity(){$(\"body\").imagesLoaded(function(){function waitloading(){$(\"body\").addClass('loaded');}setTimeout(waitloading,200);});}\n\nvar adminapp={init:function init(){console.log(\"Admin App \");opacity();orientation();}};domReady(adminapp.init);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}