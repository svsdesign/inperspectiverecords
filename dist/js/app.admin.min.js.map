{"version":3,"sources":["app.admin.min.js"],"names":["domReady","fn","document","readyState","addEventListener","opacity","$","imagesLoaded","setTimeout","addClass","adminapp","init","console","log"],"mappings":";;;;;;;;;AAAA,SAASA,SAASC,GAA6B,YAAtBC,SAASC,WAAqCD,SAASE,iBAAiB,mBAAmBH,GAA1DA,IAA+D,SAASI,UAAUC,EAAE,QAAQC,aAAa,WAAgEC,WAArD,WAAuBF,EAAE,QAAQG,SAAS,WAAkC,OAE1P,IAAIC,SAAS,CAACC,KAAK,WAAgBC,QAAQC,IAAI,cAAcR,YAAaL,SAASU,SAASC","file":"app.admin.min.js","sourcesContent":["function domReady(fn){if(document.readyState!=='loading'){fn();return;}document.addEventListener('DOMContentLoaded',fn);}function opacity(){$(\"body\").imagesLoaded(function(){function waitloading(){$(\"body\").addClass('loaded');}setTimeout(waitloading,200);});}\n\nvar adminapp={init:function init(){console.log(\"Admin App \");opacity();}};domReady(adminapp.init);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}